#!/bin/bash

# Copyright © 1999-2025 Gerard Beekmans
# Linux® is a registered trademark of Linus Torvalds.
#
# This file contains the MIT License for the software developed by Gerard Beekmans.
# The MIT License grants permission to any person obtaining a copy of this software
# and associated documentation files to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# Start Counting Time of Script
start_time=$(date +%s)

acl_version="2.3.2"
attr_version="2.5.2"
autoconf_version="2.72"
automake_version="1.18.1"
bash_version="5.3"
bc_version="7.0.3"
binutils_version="2.45"
bison_version="3.8.2"
bzip2_version="1.0.8"
check_version="0.15.2"
coreutils_version="9.7"
dbus_version="1.16.2"
dejagnu_version="1.6.3"
diffutils_version="3.12"
e2fsprogs_version="1.47.3"
elfutils_version="0.193"
expat_version="2.7.1"
expect_version="5.45.4"
file_version="5.46"
findutils_version="4.10.0"
flex_version="2.6.4"
flit_core_version="3.12.0"
gawk_version="5.3.2"
gcc_version="15.2.0"
gdbm_version="1.26"
gettext_version="0.26"
glibc_version="2.42"
gmp_version="6.3.0"
gperf_version="3.3"
grep_version="3.12"
groff_version="1.23.0"
grub_version="2.12"
gzip_version="1.14"
iana_etc_version="20250807"
inetutils_version="2.6"
intltool_version="0.51.0"
libxcrypt_version="4.4.38"
iproute2_version="6.16.0"
jinja2_version="3.1.6"
kbd_version="2.8.0"
kmod_version="34.2"
less_version="679"
libcap_version="2.76"
libffi_version="3.5.2"
libpipeline_version="1.5.8"
libtool_version="2.5.4"
linux_version="6.12.50"
lz4_version="1.10.0"
m4_version="1.4.20"
make_version="4.4.1"
man_db_version="2.13.1"
man_pages_version="6.15"
markup_safe_version="2.1.5"
meson_version="1.8.3"
mpc_version="1.3.1"
mpfr_version="4.2.2"
ncurses_version="6.5-20250809"
ninja_version="1.13.1"
openssl_version="3.5.2"
packaging_version="25.0"
patch_version="2.8"
perl_version="5.42.0"
pkgconf_version="2.5.1"
procps_ng_version="4.0.5"
psmisc_version="23.7"
python_version="3.13.7"
readline_version="8.3"
sed_version="4.9"
setuptools_version="80.9.0"
shadow_version="4.18.0"
systemd_version="257.8"
tar_version="1.35"
tcl_version="8.6.16"
texinfo_version="7.2"
tzdata_version="2025b"
util_linux_version="2.41.1"
vim_version="9.1.1629"
wheel_version="0.46.1"
xml_parser_version="2.47"
xz_version="5.8.1"
zlib_version="1.3.1"
zstd_version="1.5.7"

# Set the environment variables
export LC_ALL=POSIX
export LIBERO_TGT=$(uname -m)-libero-linux-gnu

# Set the cross-compile flags
# export CFLAGS="-Oz -pipe -march=x86-64 -fomit-frame-pointer -fstack-clash-protection \
        #-fno-plt -fexceptions -fasynchronous-unwind-tables -Wp,-D_FORTIFY_SOURCE=2"
# export CXXFLAGS="-Oz -pipe -march=x86-64 -fomit-frame-pointer -fstack-clash-protection \
        #-fno-plt -fexceptions -fasynchronous-unwind-tables -Wp,-D_FORTIFY_SOURCE=2"
# export LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,now"

# If 08BasicSystemSoftware.log does not exists then create it
if [ ! -f "/sources/08BasicSystemSoftware.log" ]; then
    touch /sources/08BasicSystemSoftware.log
fi

# If error occurs, write error to a file
exec 2> /sources/08BasicSystemSoftware.log

# Create a file for program's tests output
if [ ! -f /sources/08logs.txt ]; then
    touch /sources/08logs.txt
fi

# Chapter 8 - Installing Basic System Software
echo "" 
echo "Chapter 8 - Installing Basic System Software"

echo ""
read -t 10 -p "Press Enter to continue..." || true

# Installation of Man-pages Package
echo ""
echo "Installation of Man-pages"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/man-pages-$man_pages_version.tar.xz
cd /sources/man-pages-$man_pages_version

# Remove two man pages for password hashing functions.
# Libxcrypt will provide a better version of these man pages
rm -v man3/crypt*
            
make -R GIT=false prefix=/usr install

rm -rf /sources/man-pages-$man_pages_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Iana-etc Package
echo ""
echo "Installation of Iana-etc"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/iana-etc-$iana_etc_version.tar.gz
cd /sources/iana-etc-$iana_etc_version

cp services protocols /etc

rm -rf /sources/iana-etc-$iana_etc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Glibc Package
echo ""
echo "Installation of Glibc"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/glibc-$glibc_version.tar.xz
cd /sources/glibc-$glibc_version

# Some of the Glibc programs use the non-FHS compliant
# /var/db directory to store their runtime data.
# Apply the following patch to make such programs store
# their runtime data in the FHS-compliant locations
patch -Np1 -i ../glibc-2.42-fhs-1.patch

mkdir -v /sources/glibc-$glibc_version/build && \
    cd /sources/glibc-$glibc_version/build

# Ensure that the ldconfig and sln utilities will be installed into /usr/sbin
echo "rootsbindir=/usr/sbin" > configparms

../configure --prefix=/usr                            \
             --disable-werror                         \
             --enable-kernel=5.14                     \
             --enable-stack-protector=strong          \
             --with-headers=/usr/include              \
             --disable-nscd                           \
             libc_cv_slibdir=/usr/lib

make -j$(nproc)

# You may see some test failures. The Glibc test suite is somewhat
# dependent on the host system. A few failures out of over 5000 tests
# can generally be ignored. This is a list of the most common
# issues seen for recent versions of LFS:

# io/tst-lchmod is known to fail in the LFS chroot environment.

# The stdlib/tst-arc4random-thread test is known to fail
# if the host kernel is relatively old.

# Some tests, for example nss/tst-nss-files-hosts-multi,
# are known to fail on relatively slow systems due to an internal timeout.

# Additionally, some tests may fail with a relatively
# old CPU model or host kernel version.
make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

# Though it is a harmless message, the install stage of Glibc will complain
# about the absence of /etc/ld.so.conf. Prevent this warning with:
touch /etc/ld.so.conf

# Fix the Makefile to skip an outdated sanity check that
# fails with a modern Glibc configuration
sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile

make install

# Fix a hardcoded path to the executable loader in the ldd script
sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd

# Install the locales that can make the system respond in a different language
mkdir -pv /usr/lib/locale
localedef -i C -f UTF-8 C.UTF-8
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i el_GR -f ISO-8859-7 el_GR
localedef -i en_GB -f ISO-8859-1 en_GB
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_ES -f ISO-8859-15 es_ES@euro
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i is_IS -f ISO-8859-1 is_IS
localedef -i is_IS -f UTF-8 is_IS.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f ISO-8859-15 it_IT@euro
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ja_JP -f UTF-8 ja_JP.UTF-8
localedef -i nl_NL@euro -f ISO-8859-15 nl_NL@euro
localedef -i pt-PT -f UTF-8 pt_PT.UTF-8
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i se_NO -f UTF-8 se_NO.UTF-8
localedef -i ta_IN -f UTF-8 ta_IN.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS
localedef -i zh_TW -f UTF-8 zh_TW.UTF-8

echo ""
echo "Configuring Glibc"
read -t 10 -p "Press Enter to continue..." || true

# The /etc/nsswitch.conf file needs to be created because the
# Glibc defaults do not work well in a networked environment
cat > /etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf

passwd: files systemd
group: files systemd
shadow: files systemd

hosts: mymachines resolve [!UNAVAIL=return] files myhostname dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf
EOF

echo "[Done]"

echo ""
echo "Adding Time Zone Data"
read -t 10 -p "Press Enter to continue..." || true

# Install and set up the time zone data with the following
tar -xzf ../../tzdata$tzdata_version.tar.gz

ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}

for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward; do
    zic -L /dev/null   -d $ZONEINFO       ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix ${tz}
    zic -L leapseconds -d $ZONEINFO/right ${tz}
done

cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO

# Create the /etc/localtime file by 
# You can change the value to your location
ln -sfv /usr/share/zoneinfo/Europe/London /etc/localtime

echo "[Done]"

echo ""
echo "Configuring the Dynamic Loader"
read -t 10 -p "Press Enter to continue..." || true

# The dynamic loader (/lib/ld-linux.so.2) searches through /usr/lib for
# dynamic libraries that are needed by programs as they are run.
# However, if there are libraries in directories other than /usr/lib,
# these need to be added to the /etc/ld.so.conf file in order for
# the dynamic loader to find them
cat > /etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf
/opt/lib

EOF

# If desired, the dynamic loader can also search a directory
# and include the contents of files found there
cat >> /etc/ld.so.conf << "EOF"
# Add an include directory
include /etc/ld.so.conf.d/*.conf

EOF
mkdir -pv /etc/ld.so.conf.d

rm -rf /sources/glibc-$glibc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Zlib Package
echo ""
echo "Installation of Zlib"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/zlib-$zlib_version.tar.gz
cd /sources/zlib-$zlib_version

./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# Remove a useless static library
rm -fv /usr/lib/libz.a

rm -rf /sources/zlib-$zlib_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Bzip2 Package
echo ""
echo "Installation of Bzip2"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/bzip2-$bzip2_version.tar.gz
cd /sources/bzip2-$bzip2_version

# Apply a patch that will install the documentation for this package
patch -Np1 -i ../bzip2-1.0.8-install_docs-1.patch

# The following command ensures installation of symbolic links are relative
sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile

# Ensure the man pages are installed into the correct location
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile

# Prepare Bzip2 for compilation with
make -f Makefile-libbz2_so
make clean

make -j$(nproc)

make PREFIX=/usr install

# Install the shared library
cp -av libbz2.so.* /usr/lib
ln -sv libbz2.so.1.0.8 /usr/lib/libbz2.so

# Install the shared bzip2 binary into the /usr/bin directory,
# and replace two copies of bzip2 with symlinks
cp -v bzip2-shared /usr/bin/bzip2
for i in /usr/bin/{bzcat,bunzip2}; do
    ln -sfv bzip2 $i
done

# Remove a useless static library
rm -fv /usr/lib/libbz2.a

rm -rf /sources/bzip2-$bzip2_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Xz Package
echo ""
echo "Installation of Xz"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/xz-$xz_version.tar.xz
cd /sources/xz-$xz_version
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/xz

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/xz-$xz_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Lz4 Package
echo ""
echo "Installation of Lz4"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/lz4-$lz4_version.tar.gz
cd /sources/lz4-$lz4_version

make -j$(nproc) BUILD_STATIC=no PREFIX=/usr

make -j1 check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make BUILD_STATIC=no PREFIX=/usr install

rm -rf /sources/lz4-$lz4_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Zstd Package
echo ""
echo "Installation of Zstd"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/zstd-$zstd_version.tar.gz
cd /sources/zstd-$zstd_version
make -j$(nproc) prefix=/usr

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make prefix=/usr install

# Remove the static library
rm -v /usr/lib/libzstd.a

rm -rf /sources/xz-$xz_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of File Package
echo ""
echo "Installation of File"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/file-$file_version.tar.gz
cd /sources/file-$file_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/file-$file_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Readline Package
echo ""
echo "Installation of Readline"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/readline-$readline_version.tar.gz
cd /sources/readline-$readline_version

# Reinstalling Readline will cause the old libraries to be moved
# to <libraryname>.old. While this is normally not a problem,
#in some cases it can trigger a linking bug in ldconfig.
# This can be avoided by issuing the following two seds
sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install

sed -i 's/-Wl,-rpath,[^ ]*//' support/shobj-conf

./configure --prefix=/usr    \
            --disable-static \
            --with-curses    \
            --docdir=/usr/share/doc/readline

make -j$(nproc) SHLIB_LIBS="-lncursesw"

make install

install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline

rm -rf /sources/readline-$readline_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of M4 Package
echo ""
echo "Installation of M4"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/m4-$m4_version.tar.xz
cd /sources/m4-$m4_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/m4-$m4_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Bc Package
echo ""
echo "Installation of Bc"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/bc-$bc_version.tar.xz
cd /sources/bc-$bc_version
CC='gcc -std=c99' ./configure --prefix=/usr -G -O3 -r

make -j$(nproc)

make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/bc-$bc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Flex Package
echo ""
echo "Installation of Flex"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/flex-$flex_version.tar.gz
cd /sources/flex-$flex_version
./configure --prefix=/usr \
            --docdir=/usr/share/doc/flex \
            --disable-static

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# A few programs do not know about flex yet and try to run its predecessor, lex.
# To support those programs, create a symbolic link named lex that runs flex in
# lex emulation mode, and also create the man page of lex as a symlink:
ln -sv flex   /usr/bin/lex
ln -sv flex.1 /usr/share/man/man1/lex.1

rm -rf /sources/flex-$flex_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Tcl Package
echo ""
echo "Installation of Tcl"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/tcl$tcl_version-src.tar.gz
cd /sources/tcl$tcl_version

SRCDIR=$(pwd)
cd unix
./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --disable-rpath

make -j$(nproc)

sed -e "s|$SRCDIR/unix|/usr/lib|" \
    -e "s|$SRCDIR|/usr/include|"  \
    -i tclConfig.sh

sed -e "s|$SRCDIR/unix/pkgs/tdbc1.1.10|/usr/lib/tdbc1.1.10|" \
    -e "s|$SRCDIR/pkgs/tdbc1.1.10/generic|/usr/include|"    \
    -e "s|$SRCDIR/pkgs/tdbc1.1.10/library|/usr/lib/tcl8.6|" \
    -e "s|$SRCDIR/pkgs/tdbc1.1.10|/usr/include|"            \
    -i pkgs/tdbc1.1.10/tdbcConfig.sh

sed -e "s|$SRCDIR/unix/pkgs/itcl4.2.3|/usr/lib/itcl4.2.3|" \
    -e "s|$SRCDIR/pkgs/itcl4.2.3/generic|/usr/include|"    \
    -e "s|$SRCDIR/pkgs/itcl4.2.3|/usr/include|"            \
    -i pkgs/itcl4.2.3/itclConfig.sh

unset SRCDIR

make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

chmod 644 /usr/lib/libtclstub8.6.a

# Make the installed library writable so debugging symbols can be removed later
chmod -v u+w /usr/lib/libtcl8.6.so

# Install Tcl's headers. The next package, Expect, requires them
make install-private-headers

ln -sfv tclsh8.6 /usr/bin/tclsh

# Rename a man page that conflicts with a Perl man page
mv /usr/share/man/man3/{Thread,Tcl_Thread}.3

rm -rf /sources/tcl$tcl_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Expect Package
echo ""
echo "Installation of Expect"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/expect$expect_version.tar.gz
cd /sources/expect$expect_version

python3 -c 'from pty import spawn; spawn(["echo", "ok"])'

patch -Np1 -i ../expect-5.45.4-gcc15-1.patch

./configure --prefix=/usr           \
            --with-tcl=/usr/lib     \
            --enable-shared         \
            --disable-rpath         \
            --mandir=/usr/share/man \
            --with-tclinclude=/usr/include

make -j$(nproc)

make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

ln -svf expect$expect_version/libexpect$expect_version.so /usr/lib

rm -rf /sources/expect$expect_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of DejaGNU Package
echo ""
echo "Installation of DejaGNU"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/dejagnu-$dejagnu_version.tar.gz
cd /sources/dejagnu-$dejagnu_version

mkdir -v /sources/dejagnu-$dejagnu_version/build && \
    cd /sources/dejagnu-$dejagnu_version/build
../configure --prefix=/usr
makeinfo --html --no-split -o doc/dejagnu.html ../doc/dejagnu.texi
makeinfo --plaintext       -o doc/dejagnu.txt  ../doc/dejagnu.texi

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
install -v -dm755  /usr/share/doc/dejagnu
install -v -m644   doc/dejagnu.{html,txt} /usr/share/doc/dejagnu

rm -rf /sources/dejagnu-$dejagnu_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Pkgconf Package
echo ""
echo "Installation of Pkgconf"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/pkgconf-$pkgconf_version.tar.xz
cd /sources/pkgconf-$pkgconf_version

./configure --prefix=/usr              \
            --disable-static           \
            --docdir=/usr/share/doc/pkgconf

make -j$(nproc)

make install

# To maintain compatibility with the original Pkg-config create two symlinks
ln -sv pkgconf   /usr/bin/pkg-config
ln -sv pkgconf.1 /usr/share/man/man1/pkg-config.1

rm -rf /sources/pkgconf-$pkgconf_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Binutils Package
echo ""
echo "Installation of Binutils"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/binutils-$binutils_version.tar.xz
cd /sources/binutils-$binutils_version

mkdir -v /sources/binutils-$binutils_version/build && \
    cd /sources/binutils-$binutils_version/build
../configure --prefix=/usr       \
             --sysconfdir=/etc   \
             --enable-gold       \
             --enable-ld=default \
             --enable-plugins    \
             --enable-shared     \
             --disable-werror    \
             --enable-64-bit-bfd \
             --enable-new-dtags  \
             --with-system-zlib  \
             --enable-default-hash-style=gnu

make -j$(nproc) tooldir=/usr

# The test suite for Binutils in this section is considered critical.
# Do not skip it under any circumstances.
make -k check | tee -a /sources/08logs.txt

echo ""

# For a list of failed tests, run
grep '^FAIL:' $(find -name '*.log') | tee -a /sources/08logs.txt
# Twelve tests fail in the gold test suite when the --enable-default-pie and
# --enable-default-ssp options are passed to GCC.
# Three tests in the gprofng suite are also known to fail
read -t 10 -p "Press Enter to continue..." || true

make tooldir=/usr install

# Remove useless static libraries
rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,gprofng,opcodes,sframe}.a \
        /usr/share/doc/gprofng

rm -rf /sources/binutils-$binutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of GMP Package
echo ""
echo "Installation of GMP"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/gmp-$gmp_version.tar.xz
cd /sources/gmp-$gmp_version

# Make an adjustment for compatibility with gcc-15 and later
sed -i '/long long t1;/,+1s/()/(...)/' configure

ABI=32 ./configure --prefix=/usr    \
            --enable-cxx            \
            --disable-static        \
            --docdir=/usr/share/doc/gmp

make -j$(nproc)
make -j$(nproc) html

# The test suite for GMP in this section is considered critical.
# Do not skip it under any circumstances.
make check 2>&1 | tee gmp-check-log
awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log
read -t 10 -p "Press Enter to continue..." || true

make install
make install-html

rm -rf /sources/gmp-$gmp_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of MPFR Package
echo ""
echo "Installation of MPFR"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/mpfr-$mpfr_version.tar.xz
cd /sources/mpfr-$mpfr_version
./configure --prefix=/usr        \
            --disable-static     \
            --enable-thread-safe \
            --docdir=/usr/share/doc/mpfr

make -j$(nproc)
make -j$(nproc) html

# The test suite for MPFR in this section is considered critical.
# Do not skip it under any circumstances.
make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
make install-html

rm -rf /sources/mpfr-$mpfr_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of MPC Package
echo ""
echo "Installation of MPC"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/mpc-$mpc_version.tar.gz
cd /sources/mpc-$mpc_version
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/mpc

make -j$(nproc)
make -j$(nproc) html

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
make install-html

rm -rf /sources/mpc-$mpc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Attr Package
echo ""
echo "Installation of Attr"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/attr-$attr_version.tar.gz
cd /sources/attr-$attr_version
./configure --prefix=/usr     \
            --disable-static  \
            --sysconfdir=/etc \
            --docdir=/usr/share/doc/attr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/attr-$attr_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Acl Package
echo ""
echo "Installation of Acl"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/acl-$acl_version.tar.xz
cd /sources/acl-$acl_version
./configure --prefix=/usr         \
            --disable-static      \
            --docdir=/usr/share/doc/acl

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/acl-$acl_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Libcap Package
echo ""
echo "Installation of Libcap"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/libcap-$libcap_version.tar.xz
cd /sources/libcap-$libcap_version

# Prevent static libraries from being installed
sed -i '/install -m.*STA/d' libcap/Makefile

make -j$(nproc) prefix=/usr lib=lib

make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make prefix=/usr lib=lib install

rm -rf /sources/libcap-$libcap_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Libxcrypt Package
echo ""
echo "Installation of Libxcrypt"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/libxcrypt-$libxcrypt_version.tar.xz
cd /sources/libxcrypt-$libxcrypt_version
./configure --prefix=/usr                \
            --enable-hashes=strong,glibc \
            --enable-obsolete-api=no     \
            --disable-static             \
            --disable-failure-tokens

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/libxcrypt-$libxcrypt_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Shadow Package
echo ""
echo "Installation of Shadow"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/shadow-$shadow_version.tar.xz
cd /sources/shadow-$shadow_version

# Disable the installation of the groups program and its man pages,
# as Coreutils provides a better version
sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;

# If you wish to include /bin and/or /sbin in the PATH for some reason,
# modify the PATH in .bashrc after LIBERO has been built
sed -e 's:#ENCRYPT_METHOD DES:ENCRYPT_METHOD YESCRYPT:' \
    -e 's:/var/spool/mail:/var/mail:'                   \
    -e '/PATH=/{s@/sbin:@@;s@/bin:@@}'                  \
    -i etc/login.defs

touch /usr/bin/passwd
./configure --sysconfdir=/etc   \
            --disable-static    \
            --with-{b,yes}crypt \
            --without-libbsd    \
            --with-group-name-max-length=32

make -j$(nproc)

make exec_prefix=/usr install
make -C man install-man

echo ""
echo "Configuring Shadow" 

# To enable shadowed passwords, run the following command
pwconv

# To enable shadowed group passwords, run
grpconv

# change the default parameters, the file /etc/default/useradd must
# be created and tailored to suit your particular needs
mkdir -p /etc/default
useradd -D --gid 999

sed -i '/MAIL/s/yes/no/' /etc/default/useradd

# Setting the Root Password
echo "root:libero" | chpasswd

rm -rf /sources/shadow-$shadow_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of GCC Package
echo ""
echo "Installation of GCC"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/gcc-$gcc_version.tar.xz
cd /sources/gcc-$gcc_version

mkdir -v /sources/gcc-$gcc_version/build && \
    cd /sources/gcc-$gcc_version/build
../configure --prefix=/usr            \
             LD=ld                    \
             --enable-languages=c,c++ \
             --enable-default-pie     \
             --enable-default-ssp     \
             --enable-host-pie        \
             --disable-multilib       \
             --disable-bootstrap      \
             --disable-fixincludes    \
             --with-system-zlib

make -j$(nproc)

# One set of tests in the GCC test suite is known to exhaust the default stack,
# so increase the stack size prior to running the tests
ulimit -s -H unlimited

# Remove several known test failures
sed -e '/cpython/d' -i ../gcc/testsuite/gcc.dg/plugin/plugin.exp

# Test the results as a non-privileged user, but do not stop at errors
chown -Rv tester .
su tester -c "PATH=$PATH make -k check" | tee -a /sources/08logs.txt

echo ""

# Two tests named copy.cc and pr56837.c are known to fail.
# Additionally, several tests in the vect directory are known to fail
# if the hardware does not support AVX
# With Glibc-2.38, the analyzer tests named data-model-4.c and conftest-1.c
# are known to fail. In the asan tests, several tests in asan_test.C are known to fail.
# The test named interception-malloc-test-1.C is known to fail.
# A few unexpected failures cannot always be avoided.
# The GCC developers are usually aware of these issues, but have not resolved them yet.
../contrib/test_summary
read -t 10 -p "Press Enter to continue..." || true

make install

# The GCC build directory is owned by tester now, and the ownership of the
#installed header directory (and its content) is incorrect.
# Change the ownership to the root user and group
chown -v -R root:root \
    /usr/lib/gcc/$(gcc -dumpmachine)/15.2.0/include{,-fixed}

# Create a symlink required by the FHS for "historical" reasons
ln -svr /usr/bin/cpp /usr/lib

# Many packages use the name cc to call the C compiler.
# We've already created cc as a symlink in GCC - Pass 2,
# create its man page as a symlink as well
ln -sv gcc.1 /usr/share/man/man1/cc.1

# Add a compatibility symlink to enable building programs
# with Link Time Optimization (LTO)
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/15.2.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/

# Now that our final toolchain is in place,
# it is important to again ensure that compiling and linking will work as expected
echo 'int main(){}' | cc -x c - -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'

echo ""
echo "[Requesting program interpreter: /lib/ld-linux-x86.so.2]?"
read -t 10 -p "Press Enter to continue..." || true

echo ""

# Make sure that we're set up to use the correct start files
grep -E -o '/usr/lib.*/S?crt[1in].*succeeded' dummy.log

echo "/usr/lib/gcc/i386-pc-linux-gnu/15.2.0/../../../../lib/Scrt1.o succeeded"
echo "/usr/lib/gcc/i386-pc-linux-gnu/15.2.0/../../../../lib/crti.o succeeded"
echo "/usr/lib/gcc/i386-pc-linux-gnu/15.2.0/../../../../lib/crtn.o succeeded"

echo ""
read -t 10 -p "Press Enter to continue..." || true

echo ""

# Verify that the compiler is searching for the correct header files
grep -B4 '^ /usr/include' dummy.log

echo "#include <...> search starts here:"
echo "/usr/lib/gcc/i386-pc-linux-gnu/15.2.0/include"
echo "/usr/local/include"
echo "/usr/lib/gcc/i386-pc-linux-gnu/15.2.0/include-fixed"
echo "/usr/include"

echo ""
read -t 10 -p "Press Enter to continue..." || true

echo ""

# verify that the new linker is being used with the correct search paths
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

echo "SEARCH_DIR(\"/usr/i386-pc-linux-gnu/lib\")"
echo "SEARCH_DIR(\"/lib\")"
echo "SEARCH_DIR(\"/usr/lib\")"
echo "SEARCH_DIR(\"/usr/i386-pc-linux-gnu/lib\")"
echo "SEARCH_DIR(\"/lib\")"
echo "SEARCH_DIR(\"/usr/lib\");"

echo ""
read -t 10 -p "Press Enter to continue..." || true

echo ""

# Make sure that we're using the correct libc
grep "/lib.*/libc.so.6 " dummy.log
echo "attempt to open /usr/lib/libc.so.6 succeeded"

echo ""
read -t 10 -p "Press Enter to continue..." || true

echo ""

# Make sure GCC is using the correct dynamic linker
grep found dummy.log
echo "found ld-linux-x86.so.2 at /usr/lib/ld-linux-x86.so.2"

echo ""
read -t 10 -p "Press Enter to continue..." || true

echo ""

# Once everything is working correctly, clean up the test files
rm -v dummy.c a.out dummy.log

# Finally, move a misplaced file
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

rm -rf /sources/gcc-$gcc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Ncurses Package
echo ""
echo "Installation of Ncurses"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/ncurses-$ncurses_version.tar.gz
cd /sources/ncurses-$ncurses_version
./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --with-shared           \
            --without-debug         \
            --without-normal        \
            --with-cxx-shared       \
            --enable-pc-files       \
            --with-pkg-config-libdir=/usr/lib/pkgconfig

make -j$(nproc)

# The installation of this package will overwrite libncursesw.so.6.5 in-place.
# It may crash the shell process which is using code and data from the library file.
# Install the package with DESTDIR, and replace the library file correctly
# using install command
make DESTDIR=$PWD/dest install
install -vm755 dest/usr/lib/libncursesw.so.6.5 /usr/lib
rm -v dest/usr/lib/libncursesw.so.6.5
sed -e 's/^#if.*XOPEN.*$/#if 1/' \
-i dest/usr/include/curses.h
cp -av dest/* /

# Many applications still expect the linker to be able to find
# non-wide-character Ncurses libraries. Trick such applications
# into linking with wide-character libraries by means of symlinks and linker scripts
for lib in ncurses form panel menu ; do
    ln -sfv lib${lib}w.so /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc /usr/lib/pkgconfig/${lib}.pc
done

ln -sfv libncursesw.so /usr/lib/libcurses.so

# If desired, install the Ncurses documentation
cp -v -R doc -T /usr/share/doc/ncurses

rm -rf /sources/ncurses-$ncurses_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Sed Package
echo ""
echo "Installation of Sed"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/sed-$sed_version.tar.xz
cd /sources/sed-$sed_version
./configure --prefix=/usr

make -j$(nproc)
make -j$(nproc) html

chown -Rv tester .
su tester -c "PATH=$PATH make check" | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

# Install the package and its documentation
make install
install -d -m755           /usr/share/doc/sed
install -m644 doc/sed.html /usr/share/doc/sed

rm -rf /sources/sed-$sed_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Psmisc Package
echo ""
echo "Installation of Psmisc"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/psmisc-$psmisc_version.tar.xz
cd /sources/psmisc-$psmisc_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/psmisc-$psmisc_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Gettext Package
echo ""
echo "Installation of Gettext"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/gettext-$gettext_version.tar.xz
cd /sources/gettext-$gettext_version
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/gettext

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
chmod -v 0755 /usr/lib/preloadable_libintl.so

rm -rf /sources/gettext-$gettext_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Bison Package
echo ""
echo "Installation of Bison"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/bison-$bison_version.tar.xz
cd /sources/bison-$bison_version
./configure --prefix=/usr --docdir=/usr/share/doc/bison

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/bison-$bison_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Grep Package
echo ""
echo "Installation of Grep"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/grep-$grep_version.tar.xz
cd /sources/grep-$grep_version

# Remove a warning about using egrep and fgrep that
# makes tests on some packages fail
sed -i "s/echo/#echo/" src/egrep.sh

./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/grep-$grep_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Bash Package
echo ""
echo "Installation of Bash"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/bash-$bash_version.tar.xz
cd /sources/bash-$bash_version
./configure --prefix=/usr             \
            --without-bash-malloc     \
            --with-installed-readline \
            --docdir=/usr/share/doc/bash

make -j$(nproc)

# Ensure that the tester user can write to the sources tree
chown -Rv tester .

# The test suite of this package is designed to be run as a non-root user who
# owns the terminal connected to standard input. To satisfy the requirement,
# spawn a new pseudo terminal using Expect and run the tests as the tester user
su -s /usr/bin/expect tester << EOF
set timeout -1
spawn make tests
expect eof
lassign [wait] _ _ _ value
exit $value
EOF
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/bash-$bash_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Libtool Package
echo ""
echo "Installation of Libtool"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/libtool-$libtool_version.tar.xz
cd /sources/libtool-$libtool_version
./configure --prefix=/usr

make -j$(nproc)

make -j$(nproc) -k check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# Remove a useless static library
rm -fv /usr/lib/libltdl.a

rm -rf /sources/libtool-$libtool_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of GDBM Package
echo ""
echo "Installation of GDBM"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/gdbm-$gdbm_version.tar.gz
cd /sources/gdbm-$gdbm_version
./configure --prefix=/usr    \
            --disable-static \
            --enable-libgdbm-compat

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/gdbm-$gdbm_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Gperf Package
echo ""
echo "Installation of Gperf"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/gperf-$gperf_version.tar.gz
cd /sources/gperf-$gperf_version
./configure --prefix=/usr --docdir=/usr/share/doc/gperf

make -j$(nproc)

# The tests are known to fail if running multiple
# simultaneous tests (-j option greater than 1)
make -j1 check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/gperf-$gperf_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Expat Package
echo ""
echo "Installation of Expat"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/expat-$expat_version.tar.xz
cd /sources/expat-$expat_version
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/expat

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# If desired, install the documentation
install -v -m644 doc/*.{html,css} /usr/share/doc/expat

rm -rf /sources/expat-$expat_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Inetutils Package
echo ""
echo "Installation of Inetutils"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/inetutils-$inetutils_version.tar.xz
cd /sources/inetutils-$inetutils_version

# First, make the package build with gcc-14.1 or later
sed -i 's/def HAVE_TERMCAP_TGETENT/ 1/' telnet/telnet.c

./configure --prefix=/usr        \
            --bindir=/usr/bin    \
            --localstatedir=/var \
            --disable-logger     \
            --disable-whois      \
            --disable-rcp        \
            --disable-rexec      \
            --disable-rlogin     \
            --disable-rsh        \
            --disable-servers

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# Move a program to the proper location
mv -v /usr/{,s}bin/ifconfig

rm -rf /sources/inetutils-$inetutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Less Package
echo ""
echo "Installation of Less"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/less-$less_version.tar.gz
cd /sources/less-$less_version
./configure --prefix=/usr --sysconfdir=/etc

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/less-$less_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Perl Package
echo ""
echo "Installation of Perl"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/perl-$perl_version.tar.xz
cd /sources/perl-$perl_version

# This version of Perl builds the Compress::Raw::Zlib and Compress::Raw::BZip2 modules.
# By default Perl will use an internal copy of the sources for the build.
# Issue the following command so that Perl will use the libraries installed on the system
export BUILD_ZLIB=False
export BUILD_BZIP2=0

sh Configure -des                                       \
             -Dprefix=/usr                              \
             -Dvendorprefix=/usr                        \
             -Dprivlib=/usr/lib/perl5/core_perl         \
             -Darchlib=/usr/lib/perl5/core_perl         \
             -Dsitelib=/usr/lib/perl5/site_perl         \
             -Dsitearch=/usr/lib/perl5/site_perl        \
             -Dvendorlib=/usr/lib/perl5/vendor_perl     \
             -Dvendorarch=/usr/lib/perl5/vendor_perl    \
             -Dman1dir=/usr/share/man/man1              \
             -Dman3dir=/usr/share/man/man3              \
             -Dpager="/usr/bin/less -isR"               \
             -Duseshrplib                               \
             -Dusethreads

make -j$(nproc)

TEST_JOBS=$(nproc) make test_harness | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
unset BUILD_ZLIB BUILD_BZIP2

rm -rf /sources/perl-$perl_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of XML::Parser Package
echo ""
echo "Installation of XML::Parser"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/XML-Parser-$xml_parser_version.tar.gz
cd /sources/XML-Parser-$xml_parser_version

perl Makefile.PL

make -j$(nproc)

make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/XML-Parser-$xml_parser_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Intltool Package
echo ""
echo "Installation of Intltool"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/intltool-$intltool_version.tar.gz
cd /sources/intltool-$intltool_version

# First fix a warning that is caused by perl-5.22 and later
sed -i 's:\\\${:\\\$\\{:' intltool-update.in

./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool/I18N-HOWTO

rm -rf /sources/intltool-$intltool_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Autoconf Package
echo ""
echo "Installation of Autoconf"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/autoconf-$autoconf_version.tar.xz
cd /sources/autoconf-$autoconf_version

./configure --prefix=/usr

make -j$(nproc)

make -j$(nproc) check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/autoconf-$autoconf_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Automake Package
echo ""
echo "Installation of Automake"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/automake-$automake_version.tar.xz
cd /sources/automake-$automake_version
./configure --prefix=/usr --docdir=/usr/share/doc/automake

make -j$(nproc)

make -j$(($(nproc)>4?$(nproc):4)) check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/automake-$automake_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of OpenSSL Package
echo ""
echo "Installation of OpenSSL"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/openssl-$openssl_version.tar.gz
cd /sources/openssl-$openssl_version
./config --prefix=/usr         \
         --openssldir=/etc/ssl \
         --libdir=lib          \
         shared                \
         zlib-dynamic

make -j$(nproc)

# One test, 30-test_afalg.t, is known to fail if the host kernel does not
# have CONFIG_CRYPTO_USER_API_SKCIPHER enabled, or does not have any options
# providing an AES with CBC implementation (for example, the combination of
#CONFIG_CRYPTO_AES and CONFIG_CRYPTO_CBC, or CONFIG_CRYPTO_AES_NI_INTEL if the
# CPU supports AES-NI) enabled. If it fails, it can safely be ignored
HARNESS_JOBS=$(nproc) make test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
make MANSUFFIX=ssl install

# Add the version to the documentation directory name,
# to be consistent with other packages
mv -v /usr/share/doc/openssl /usr/share/doc/openssl

# If desired, install some additional documentation
cp -vfr doc/* /usr/share/doc/openssl

rm -rf /sources/openssl-$openssl_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Libelf Package
echo ""
echo "Installation of Libelf"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xjf /sources/elfutils-$elfutils_version.tar.bz2
cd /sources/elfutils-$elfutils_version
./configure --prefix=/usr                \
            --disable-debuginfod         \
            --enable-libdebuginfod=dummy

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make -C libelf install
install -vm644 config/libelf.pc /usr/lib/pkgconfig
rm /usr/lib/libelf.a

rm -rf /sources/elfutils-$elfutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Libffi Package
echo ""
echo "Installation of Libffi"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/libffi-$libffi_version.tar.gz
cd /sources/libffi-$libffi_version
./configure --prefix=/usr          \
            --disable-static       \
            --with-gcc-arch=native

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/libffi-$libffi_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Python Package
echo ""
echo "Installation of Python"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/Python-$python_version.tar.xz
cd /sources/Python-$python_version
./configure --prefix=/usr           \
            --enable-shared         \
            --with-system-expat     \
            --enable-optimizations  \
            --without-static-libpython

make -j$(nproc)

make install

cat > /etc/pip.conf << EOF
[global]
root-user-action = ignore
disable-pip-version-check = true
EOF

rm -rf /sources/Python-$python_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Flit-Core Package
echo ""
echo "Installation of Flit-Core"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/flit_core-$flit_core_version.tar.gz
cd /sources/flit_core-$flit_core_version

# Build the package
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist flit_core

rm -rf /sources/flit_core-$flit_core_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Packaging Package
echo ""
echo "Installation of Packaging"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/packaging-$packaging_version.tar.gz
cd /sources/packaging-$packaging_version

# Build the package
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist packaging

rm -rf /sources/packaging-$packaging_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Flit-Core Package
echo ""
echo "Installation of Wheel"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/wheel-$wheel_version.tar.gz
cd /sources/wheel-$wheel_version

# Compile Wheel with the following command
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install Wheel with the following command
pip3 install --no-index --find-links=dist wheel

rm -rf /sources/wheel-$wheel_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Setuptools Package
echo ""
echo "Installation of Setuptools"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/setuptools-$setuptools_version.tar.gz
cd /sources/setuptools-$setuptools_version

# Build the package
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist setuptools

rm -rf /sources/setuptools-$setuptools_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Ninja Package
echo ""
echo "Installation of Ninja"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/ninja-$ninja_version.tar.gz
cd /sources/ninja-$ninja_version

# When run, ninja normally utilizes the greatest possible number of processes in parallel.
# By default this is the number of cores on the system, plus two.
# This may overheat the CPU, or make the system run out of memory.
# When ninja is invoked from the command line, passing the -jN parameter will
# limit the number of parallel processes. Some packages embed the execution of ninja,
# and do not pass the -j parameter on to it.
# Using the optional procedure below allows a user to limit the number of parallel processes
# via an environment variable, NINJAJOBS. For example, setting
export NINJAJOBS=4

# If desired, make ninja recognize the environment variable NINJAJOBS by
# running the stream editor
sed -i '/int Guess/a \
  int   j = 0;\
  char* jobs = getenv( "NINJAJOBS" );\
  if ( jobs != NULL ) j = atoi( jobs );\
  if ( j > 0 ) return j;\
' src/ninja.cc

# Build Ninja
python3 configure.py --bootstrap --verbose

install -vm755 ninja /usr/bin/
install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja

rm -rf /sources/ninja-$ninja_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Meson Package
echo ""
echo "Installation of Meson"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/meson-$meson_version.tar.gz
cd /sources/meson-$meson_version

# Compile Meson with the following command
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist meson
install -vDm644 data/shell-completions/bash/meson /usr/share/bash-completion/completions/meson

rm -rf /sources/meson-$meson_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Kmod Package
echo ""
echo "Installation of Kmod"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/kmod-$kmod_version.tar.xz
cd /sources/kmod-$kmod_version

mkdir -v /sources/kmod-$kmod_version/build && \
    cd /sources/kmod-$kmod_version/build

meson setup --prefix=/usr ..    \
            --buildtype=release \
            -D manpages=false

ninja

ninja install

rm -rf /sources/kmod-$kmod_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Coreutils Package
echo ""
echo "Installation of Coreutils"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/coreutils-$coreutils_version.tar.xz
cd /sources/coreutils-$coreutils_version

# First, apply a patch for a security problem identified upstream
patch -Np1 -i ../coreutils-9.7-upstream_fix-1.patch

# POSIX requires that programs from Coreutils recognize character
# boundaries correctly even in multibyte locales.
# The following patch fixes this non-compliance and other internationalization-related bugs
patch -Np1 -i ../coreutils-9.7-i18n-1.patch

autoreconf -fiv
FORCE_UNSAFE_CONFIGURE=1 ./configure \
            --prefix=/usr            \
            --enable-no-install-program=kill,uptime

make -j$(nproc)

# run the tests that are meant to be run as user root
make NON_ROOT_USERNAME=tester check-root | tee -a /sources/08logs.txt

# We're going to run the remainder of the tests as the tester user. Certain
# tests require that the user be a member of more than one group.
# So that these tests are not skipped, add a temporary group and make the
# user tester a part of it
groupadd -g 102 dummy -U tester
chown -Rv tester .
su tester -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check" | tee -a /sources/08logs.txt
groupdel dummy
read -t 10 -p "Press Enter to continue..." || true

make install

# Move programs to the locations specified by the FHS
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i 's/"1"/"8"/' /usr/share/man/man8/chroot.8

rm -rf /sources/coreutils-$coreutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Diffutils Package
echo ""
echo "Installation of Diffutils"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/diffutils-$diffutils_version.tar.xz
cd /sources/diffutils-$diffutils_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/diffutils-$diffutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Gawk Package
echo ""
echo "Installation of Gawk"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/gawk-$gawk_version.tar.xz
cd /sources/gawk-$gawk_version

# Ensure some unneeded files are not installed
sed -i 's/extras//' Makefile.in

./configure --prefix=/usr

make -j$(nproc)

chown -Rv tester .
su tester -c "PATH=$PATH make check" | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

rm -f /usr/bin/gawk-$gawk_version
make install

# The installation process already created awk as a symlink to gawk,
# create its man page as a symlink as well
ln -sv gawk.1 /usr/share/man/man1/awk.1

# If desired, install the documentation
mkdir -pv                                   /usr/share/doc/gawk
cp    -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk

rm -rf /sources/gawk-$gawk_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Findutils Package
echo ""
echo "Installation of Findutils"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/findutils-$findutils_version.tar.xz
cd /sources/findutils-$findutils_version
./configure --prefix=/usr --localstatedir=/var/lib/locate

make -j$(nproc)

chown -Rv tester .
su tester -c "PATH=$PATH make check" | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/findutils-$findutils_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Groff Package
echo ""
echo "Installation of Groff"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/groff-$groff_version.tar.gz
cd /sources/groff-$groff_version
PAGE="A4" ./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/groff-$groff_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of GRUB Package
echo ""
echo "Installation of GRUB"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/grub-$grub_version.tar.xz
cd /sources/grub-$grub_version

./configure --prefix=/usr       \
            --sysconfdir=/etc   \
            --disable-efiemu    \
            --disable-werror

make -j$(nproc)

make install
mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions

rm -rf /sources/grub-$grub_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Gzip Package
echo ""
echo "Installation of Gzip"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/gzip-$gzip_version.tar.xz
cd /sources/gzip-$gzip_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/gzip-$gzip_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of IPRoute2 Package
echo ""
echo "Installation of IPRoute2"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/iproute2-$iproute2_version.tar.xz
cd /sources/iproute2-$iproute2_version

# The arpd program included in this package will not be built
# since it depends on Berkeley DB
sed -i /ARPD/d Makefile
rm -fv man/man8/arpd.8

make -j$(nproc) NETNS_RUN_DIR=/run/netns

make SBINDIR=/usr/sbin install

# If desired, install the documentation
mkdir -pv             /usr/share/doc/iproute2
install -vDm644 COPYING README* -t /usr/share/doc/iproute2

rm -rf /sources/iproute2-$iproute2_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Kbd Package
echo ""
echo "Installation of Kbd"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/kbd-$kbd_version.tar.xz
cd /sources/kbd-$kbd_version

# The behavior of the backspace and delete keys is not consistent across
# the keymaps in the Kbd package. The following patch fixes this issue for i386 keymaps
patch -Np1 -i ../kbd-2.8.0-backspace-1.patch

# Remove the redundant resizecons program (it requires the defunct svgalib to
# provide the video mode files - for normal use setfont sizes the console appropriately)
# together with its manpage
sed -i '/RESIZECONS_PROGS=/s/yes/no/' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in

./configure --prefix=/usr --disable-vlock

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# If desired, install the documentation
cp -R -v docs/doc -T /usr/share/doc/kbd

rm -rf /sources/kbd-$kbd_version

# Installation of Libpipeline Package
echo ""
echo "Installation of Libpipeline"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/libpipeline-$libpipeline_version.tar.gz
cd /sources/libpipeline-$libpipeline_version
./configure --prefix=/usr

make -j$(nproc)

make install

rm -rf /sources/libpipeline-$libpipeline_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Make Package
echo ""
echo "Installation of Make"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/make-$make_version.tar.gz
cd /sources/make-$make_version
./configure --prefix=/usr

make -j$(nproc)

chown -Rv tester .
su tester -c "PATH=$PATH make check" | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/make-$make_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Patch Package
echo ""
echo "Installation of Patch"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/patch-$patch_version.tar.xz
cd /sources/patch-$patch_version
./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/patch-$patch_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Tar Package
echo ""
echo "Installation of Tar"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/tar-$tar_version.tar.xz
cd /sources/tar-$tar_version

FORCE_UNSAFE_CONFIGURE=1  \
./configure --prefix=/usr

make -j$(nproc)

make -j$(nproc) check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install
make -C doc install-html docdir=/usr/share/doc/tar

rm -rf /sources/tar-$tar_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Texinfo Package
echo ""
echo "Installation of Texinfo"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/texinfo-$texinfo_version.tar.xz
cd /sources/texinfo-$texinfo_version

# Fix a code pattern that causes Perl-5.42 or later to display a warning
sed 's/! $output_file eq/$output_file ne/' -i tp/Texinfo/Convert/*.pm

./configure --prefix=/usr

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# Optionally, install the components belonging in a TeX installation
make TEXMF=/usr/share/texmf install-tex

# The Info documentation system uses a plain text file to hold its list of menu entries.
# The file is located at /usr/share/info/dir. Unfortunately, due to occasional problems
# in the Makefiles of various packages, it can sometimes get out of sync with the info pages
# installed on the system. If the /usr/share/info/dir file ever needs to be recreated,
# the following optional commands will accomplish the task
pushd /usr/share/info
    rm -v dir
    for f in *
        do install-info $f dir 2>/dev/null
    done
popd

rm -rf /sources/texinfo-$texinfo_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Vim Package
echo ""
echo "Installation of Vim"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/vim-$vim_version.tar.gz
cd /sources/vim-$vim_version

# Change the default location of the vimrc configuration file to /etc
echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h

./configure --prefix=/usr

make -j$(nproc)

chown -Rv tester .
sed '/test_plugin_glvs/d' -i src/testdir/Make_all.mak
su tester -c "TERM=xterm-256color LANG=en_US.UTF-8 make -j1 test" \
    &> vim-test.log
read -t 10 -p "Press Enter to continue..." || true

make install

# Many users reflexively type vi instead of vim. To allow execution of vim when users
# habitually enter vi, create a symlink for both the binary and the man page
# in the provided languages
ln -sv vim /usr/bin/vi
for L in  /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done

echo ""
echo "Configuring Vim"
read -t 10 -p "Press Enter to continue..." || true

cat > /etc/vimrc << "EOF"
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1

set nocompatible
set backspace=2
set mouse=
syntax on
set number
if (&term == "xterm") || (&term == "putty")
  set background=dark
endif

EOF

rm -rf /sources/vim-$vim_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of MarkupSafe Package
echo ""
echo "Installation of MarkupSafe"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/MarkupSafe-$markup_safe_version.tar.gz
cd /sources/MarkupSafe-$markup_safe_version

# Build the package
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist Markupsafe

rm -rf /sources/MarkupSafe-$markup_safe_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Jinja2 Package
echo ""
echo "Installation of Jinja2"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/Jinja2-$jinja2_version.tar.gz
cd /sources/Jinja2-$jinja2_version

# Build the package
pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

# Install the package
pip3 install --no-index --find-links dist Jinja2

rm -rf /sources/Jinja2-$jinja2_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Systemd Package
echo ""
echo "Installation of Systemd"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/systemd-$systemd_version.tar.gz
cd /sources/systemd-$systemd_version

# Remove two unneeded groups, render and sgx, from the default udev rules
sed -e 's/GROUP="render"/GROUP="video"/' \
    -e 's/GROUP="sgx", //' \
    -i rules.d/50-udev-default.rules.in

mkdir -p build
cd build

meson setup \
      --prefix=/usr                     \
      --buildtype=release               \
      -Ddefault-dnssec=no               \
      -Dfirstboot=false                 \
      -Dinstall-tests=false             \
      -Dldconfig=false                  \
      -Dsysusers=false                  \
      -Drpmmacrosdir=no                 \
      -Dhomed=disabled                  \
      -Duserdb=false                    \
      -Dman=disabled                    \
      -Dmode=release                    \
      -Dpamconfdir=no                   \
      -Ddev-kvm-mode=0660               \
      -Dnobody-group=nogroup            \
      -Dsysupdate=disabled              \
      -Dukify=disabled                  \
      -Ddocdir=/usr/share/doc/systemd   \
      ..

# Compile the package
ninja

# Before running the tests, create a minimal /etc/os-release file
echo 'NAME="Linux From Scratch"' > /etc/os-release
ninja test

# Install the package
ninja install

# Create the /etc/machine-id file needed by systemd-journald
systemd-machine-id-setup

# Set up the basic target structure
systemctl preset-all

rm -rf /sources/systemd-$systemd_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of D-Bus Package
echo ""
echo "Installation of D-Bus"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/dbus-$dbus_version.tar.xz
cd /sources/dbus-$dbus_version

mkdir -v /sources/dbus-$dbus_version/build && \
    cd /sources/dbus-$dbus_version/build

meson setup --prefix=/usr --buildtype=release --wrap-mode=nofallback ..

ninja

ninja test | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

ninja install

# Create a symlink so that D-Bus and systemd can use the same machine-id file
ln -sfv /etc/machine-id /var/lib/dbus

rm -rf /sources/dbus-$dbus_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Man-DB Package
echo ""
echo "Installation of Man-DB"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/man-db-$man_db_version.tar.xz
cd /sources/man-db-$man_db_version
./configure --prefix=/usr                       \
            --docdir=/usr/share/doc/man-db      \
            --sysconfdir=/etc                   \
            --disable-setuid                    \
            --enable-cache-owner=bin            \
            --with-browser=/usr/bin/lynx        \
            --with-vgrind=/usr/bin/vgrind       \
            --with-grap=/usr/bin/grap

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/man-db-$man_db_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Procps-ng Package
echo ""
echo "Installation of Procps-ng"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/procps-ng-$procps_ng_version.tar.xz
cd /sources/procps-ng-$procps_ng_version
./configure --prefix=/usr                           \
            --docdir=/usr/share/doc/procps-ng       \
            --disable-static                        \
            --disable-kill                          \
            --enable-watch8bit                      \
            --with-systemd

make -j$(nproc)

chown -R tester .
su tester -c "PATH=$PATH make check" | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

rm -rf /sources/procps-ng-$procps_ng_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of Util-Linux Package
echo ""
echo "Installation of Util-Linux"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xf /sources/util-linux-$util_linux_version.tar.xz
cd /sources/util-linux-$util_linux_version

./configure ADJTIME_PATH=/var/lib/hwclock/adjtime \
            --bindir=/usr/bin       \
            --libdir=/usr/lib       \
            --runstatedir=/run      \
            --sbindir=/usr/sbin     \
            --disable-chfn-chsh     \
            --disable-login         \
            --disable-nologin       \
            --disable-su            \
            --disable-setpriv       \
            --disable-runuser       \
            --disable-pylibmount    \
            --disable-liblastlog2   \
            --disable-static        \
            --without-python        \
            --docdir=/usr/share/doc/util-linux

make -j$(nproc)

make install

rm -rf /sources/util-linux-$util_linux_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

# Installation of E2fsprogs Package
echo ""
echo "Installation of E2fsprogs"

# Pause for 5 seconds
sleep 5

cd /sources
tar -xzf /sources/e2fsprogs-$e2fsprogs_version.tar.gz
cd /sources/e2fsprogs-$e2fsprogs_version

mkdir -v /sources/e2fsprogs-$e2fsprogs_version/build && \
    cd /sources/e2fsprogs-$e2fsprogs_version/build

../configure --prefix=/usr           \
             --sysconfdir=/etc       \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck

make -j$(nproc)

make check | tee -a /sources/08logs.txt
read -t 10 -p "Press Enter to continue..." || true

make install

# Remove useless static libraries
rm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a

# This package installs a gzipped .info file but doesn't update the system-wide dir file.
# Unzip this file and then update the system dir file using the following commands
gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info

# If desired, create and install some additional documentation by
# issuing the following commands
makeinfo -o      doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info

echo ""
echo "Configuring E2fsprogs"

# /etc/mke2fs.conf contains the default value of various command line options of mke2fs.
# You may edit the file to make the default values suitable for your need. For example,
# some utilities (not in LFS or BLFS) cannot recognize a ext4 file system with
# metadata_csum_seed feature enabled. If you need such an utility,
# you may remove the feature from the default ext4 feature list with the command
sed 's/metadata_csum_seed,//' -i /etc/mke2fs.conf

rm -rf /sources/e2fsprogs-$e2fsprogs_version

echo ""
echo "[Done]"
read -t 10 -p "Press Enter to continue..." || true

echo ""
echo "Cleaning Up"
read -t 10 -p "Press Enter to continue..." || true

# Clean up some extra files left over from running tests
rm -rf /tmp/*

# There are also several files in the /usr/lib and /usr/libexec directories with a file
# name extension of .la. These are "libtool archive" files.
# On a modern Linux system the libtool .la files are only useful for libltdl.
# No libraries in LFS are expected to be loaded by libltdl, and it's known that some .la files
# can break BLFS package builds. Remove those files now
find /usr/lib /usr/libexec -name \*.la -delete

# The compiler built in Chapter 6 and Chapter 7 is still partially installed and not needed anymore.
# Remove it with
# find /usr -depth -name $(uname -m)-libero-linux-gnu\* | xargs rm -rf

# Remove the temporary 'tester' user account created at the beginning of the previous chapter
userdel -r tester

# End Counnting Time of Script
end_time=$(date +%s)
time_elapsed=$((end_time - start_time))
hours=$((time_elapsed / 3600))
minutes=$((time_elapsed % 3600 / 60))
seconds=$((time_elapsed % 60))
echo "Time: $hours hour(s), $minutes minute(s), and $seconds second(s)"
